#!/usr/bin/env perl

use strict;
use warnings;

our $home;

BEGIN {
  use FindBin;
  FindBin::again();

  $home = ($ENV{NETDISCO_HOME} || $ENV{HOME});

  # try to find a localenv if one isn't already in place.
  if (!exists $ENV{PERL_LOCAL_LIB_ROOT}) {
      use File::Spec;
      my $localenv = File::Spec->catfile($FindBin::RealBin, 'localenv');
      exec($localenv, $0, @ARGV) if -f $localenv;
      $localenv = File::Spec->catfile($home, 'perl5', 'bin', 'localenv');
      exec($localenv, $0, @ARGV) if -f $localenv;

      die "Sorry, can't find libs required for App::Netdisco.\n"
        if !exists $ENV{PERLBREW_PERL};
  }

  use Path::Class;

  # stuff useful locations into @INC and $PATH
  unshift @INC,
    dir($FindBin::RealBin)->parent->subdir('lib')->stringify,
    dir($FindBin::RealBin, 'lib')->stringify;
}

# for netdisco app config
use App::Netdisco;
use Dancer qw/:moose :script/;
use Dancer::Plugin::DBIC 'schema';

info "App::Netdisco version $App::Netdisco::VERSION loaded.";

use Try::Tiny;
use Getopt::Long;
Getopt::Long::Configure ("bundling");

my ($device, $port, $extra, $debug);
my $result = GetOptions(
  'device|d=s' => \$device,
  'port|p=s'   => \$port,
  'extra|e=s'  => \$extra,
  'debug|D'    => \$debug,
) or exit(1);

my $CONFIG = config();
$CONFIG->{logger} = 'console';
$CONFIG->{log} = ($debug ? 'debug' : 'info');

# reconfigure logging to force console output
Dancer::Logger->init('console', $CONFIG);

# set max outstanding requests for AnyEvent::DNS
local $ENV{'PERL_ANYEVENT_MAX_OUTSTANDING_DNS'}
    = setting('dns')->{max_outstanding} || 10;
local $ENV{'PERL_ANYEVENT_HOSTS'}
    = setting('dns')->{hosts_file} || '/etc/hosts';

# for the in-memory local job queue
schema('daemon')->deploy;

# get requested action
my $action = shift @ARGV;

if (!length $action) {
  error 'error: missing action!';
  exit (1);
}

# create worker (placeholder object for the role methods)
{
  package MyWorker;
  use Moo;
  with 'App::Netdisco::Daemon::Worker::Poller::Device';
  with 'App::Netdisco::Daemon::Worker::Poller::Arpnip';
  with 'App::Netdisco::Daemon::Worker::Poller::Macsuck';
  with 'App::Netdisco::Daemon::Worker::Poller::Nbtstat';
  with 'App::Netdisco::Daemon::Worker::Poller::Expiry';
  with 'App::Netdisco::Daemon::Worker::Interactive::DeviceActions';
  with 'App::Netdisco::Daemon::Worker::Interactive::PortActions';
}
my $worker = MyWorker->new();

# belt and braces check before we go ahead
if (not $worker->can( $action )) {
  error sprintf 'error: %s is not a valid action', $action;
  exit (1);
}

# what job are we asked to do?
my $job = schema('daemon')->resultset('Admin')->new_result({
  job => 0,
  action => $action,
  device => $device,
  port   => $port,
  subaction => $extra,
});

# do job
my ($status, $log);
try {
    info sprintf '%s: started at %s', $action, scalar localtime;
    ($status, $log) = $worker->$action($job);
}
catch {
    $status = 'error';
    $log = "error running job: $_";
};

info sprintf '%s: finished at %s', $action, scalar localtime;
info sprintf '%s: status %s: %s', $action, $status, $log;

exit ($status eq 'done' ? 0 : 1);

=head1 NAME

netdisco-do - Run any Netdisco job from the command-line.

=head1 USAGE

 ~/bin/netdisco-do <action> [-D] [-d <device> [-p <port>] [-e <extra>]]

Regardless of Netdisco configuration, debug level logging is enabled if the
C<-D> flag is given.

=head1 DESCRIPTION

This program allows you to run any Netdisco poller job from the command-line.

Note that some jobs (C<discoverall>, C<macwalk>, C<arpwalk>), C<nbtwalk>)
simply add entries to the Netdisco job queue for other jobs, so won't seem
to do much when you trigger them.

=head1 ACTIONS

=head2 discover

Run a discover on the device (specified with C<-d>).

=head2 macsuck

Run a macsuck on the device (specified with C<-d>).

=head2 arpnip

Run an arpnip on the device (specified with C<-d>).

=head2 nbtstat

Run an nbtstat on the node (specified with C<-d>).

=head2 set_location

Set the SNMP location field on the device (specified with C<-d>). Pass the
location string in the C<-e> extra parameter.

=head2 set_contact

Set the SNMP contact field on the device (specified with C<-d>). Pass the
contact name in the C<-e> extra parameter.

=head2 set_portname

Set the description on a device port. Requires the C<-d> parameter (device),
C<-p> parameter (port), and C<-e> parameter (description).

=head2 set_portcontrol

Set the up/down status on a device port. Requires the C<-d> parameter
(device), C<-p> parameter (port), and C<-e> parameter ("up" or "down").

=head2 set_vlan

Set the native VLAN on a device port. Requires the C<-d> parameter (device),
C<-p> parameter (port), and C<-e> parameter (VLAN number).

=head2 set_power

Set the PoE on/off status on a device port. Requires the C<-d> parameter
(device), C<-p> parameter (port), and C<-e> parameter ("true" or "false").

=cut
