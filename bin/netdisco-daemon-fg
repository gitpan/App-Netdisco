#!/usr/bin/env perl

use FindBin;
FindBin::again();
use Path::Class 'dir';

BEGIN {
  # stuff useful locations into @INC
  unshift @INC,
    dir($FindBin::RealBin)->parent->subdir('lib')->stringify,
    dir($FindBin::RealBin, 'lib')->stringify;
}

# for netdisco app config
use App::Netdisco;
use Dancer qw/:moose :script/;
info "App::Netdisco version $App::Netdisco::VERSION daemon loaded.";

# callbacks and local job queue management
use App::Netdisco::Daemon::Queue ':all';

# needed to quench AF_INET6 symbol errors
use NetAddr::IP::Lite ':lower';

use Role::Tiny::With;
use MCE::Signal '-setpgrp';
use MCE;

# set max outstanding requests for AnyEvent::DNS
local $ENV{'PERL_ANYEVENT_MAX_OUTSTANDING_DNS'}
    = setting('dns')->{max_outstanding} || 10;

# set temporary MCE files' location in home directory
my $home = ($ENV{NETDISCO_HOME} || $ENV{HOME});
my $tmp_dir = ($ENV{NETDISCO_TEMP} || dir($home, 'tmp'));
mkdir $tmp_dir if ! -d $tmp_dir;

my $mce = MCE->new(
  spawn_delay => 0.15,
  job_delay   => 1.15,
  tmp_dir     => $tmp_dir,
  user_func    => sub { $_[0]->worker_body },
  on_post_exit => \&restart_worker,
  user_tasks   => build_tasks_list(),
)->run();

sub build_tasks_list {
  # NB MCE does not like max_workers => 0
  my $tasks = [];

  setting('workers')->{pollers} = 2
    if !defined setting('workers')->{pollers};
  setting('workers')->{interactives} = 2
    if !defined setting('workers')->{interactives};

  push @$tasks, {
    max_workers => 1,
    user_begin => worker_factory('Manager'),
  } if setting('workers')->{pollers} or setting('workers')->{interactives};

  push @$tasks, {
    max_workers => 1,
    user_begin => worker_factory('Scheduler'),
  } if setting('housekeeping');

  push @$tasks, {
    max_workers => setting('workers')->{pollers},
    user_begin => worker_factory('Poller'),
  } if setting('workers')->{pollers};

  push @$tasks, {
    max_workers => setting('workers')->{interactives},
    user_begin => worker_factory('Interactive'),
  } if setting('workers')->{interactives};

  info sprintf "MCE will load: %s Manager, %s Scheduler, %s Poller, %s Interactive",
    ((setting('workers')->{pollers} or setting('workers')->{interactives}) ? 1 : 0),
    (setting('housekeeping') ? 1 : 0),
    (setting('workers')->{pollers} || 0),
    (setting('workers')->{interactives} || 0);

  return $tasks;
}

sub num_workers {
  return (setting('workers')->{pollers} + setting('workers')->{interactives});
}

sub worker_factory {
  my $role = shift;
  return sub {
    my $self = shift;
    my $wid = $self->wid;
    info "applying role $role to worker $wid";

    # $self->sendto('stderr', ">>> worker $wid starting with role $role\n");
    Role::Tiny->apply_roles_to_object($self, "App::Netdisco::Daemon::Worker::$role");

    $self->worker_begin if $self->can('worker_begin');
  };
}

sub restart_worker {
  my ($self, $e) = @_;
  reset_jobs($e->{wid});

  debug "restarting worker $e->{wid}";
  $self->restart_worker($e->{wid});
}

=head1 NAME

netdisco-daemon-fg - Job Control for Netdisco

=head1 SEE ALSO

=over 4

=item *

L<App::Netdisco>

=back

=cut
